#pragma kernel CSMain
#define PI 3.14159274f

RWTexture2D<float4> Result;

float2 gaussian(float2 uv);
uint rngState;
int N;
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float2 ret = gaussian(id.xy);
    Result[id.xy] = float4(ret,0,0);
}


float rand2dTo1d(float2 value, float2 dotDir = float2(12.9898, 78.233)){
	float2 smallValue = sin(value);
	float random = dot(smallValue, dotDir);
	random = frac(abs(sin(random) * 143758.5453));
	return random;
}

float2 rand2dTo2d(float2 value)
{
	return float2(
		rand2dTo1d(value, float2(12.989, 78.233)),
		rand2dTo1d(value, float2(39.346, 11.135))
		);
}



uint wangHash(uint seed)
{
	seed = (seed ^ 61) ^(seed >> 16);
	seed *= 9;
	seed = seed ^(seed >> 4);
	seed *= 0x27d4eb2d;
	seed = seed ^(seed >> 15);
	return seed;
}

float rand()
{
	rngState ^= (rngState << 13);
	rngState ^= (rngState >> 17);
	rngState ^= (rngState << 5);
	return rngState / 4294967296.0f;;
}

//float2 gaussian(float2 id)
//{
//	rngState = wangHash(id.y * N + id.x);
//	float x1 = rand();
//	float x2 = rand();
//
//	x1 = max(1e-6f, x1);
//	x2 = max(1e-6f, x2);
//
//	float g1 = sqrt(-2.0f * log(x1)) * cos(2.0f * PI * x2);
//	float g2 = sqrt(-2.0f * log(x1)) * sin(2.0f * PI * x2);
//
//	return float2(g1, g2);
//}


float2 gaussian(float2 uv)
{
	float2 rand = rand2dTo2d(uv);

	rand.x = max(1e-6f, rand.x);
	rand.y = max(1e-6f, rand.y);

	float t = sqrt(-2.0f * log(rand.x));

	return float2( t * cos(2.0f * PI * rand.y), 
				   t * sin(2.0f * PI * rand.y));
}